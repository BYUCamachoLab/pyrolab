from ctypes import *
import pyvisa
import time

from pyrolab.drivers.lasers import Laser

#TODO: Make a test file. Check laser status function return types. Add motor functionality. find a way to track wavelength and other relevant data.

class SacherTech(Laser):
    """
    Driver for the 420nm and 980nm Sachertechnik group lasers 

    The laser must already be physically turned on and connected to a USB port
    of some host computer, whether that be a local machine or one hosted by 
    a PyroLab server.
    
    """

    def __init__(self) -> None:
        self.var = pyvisa.ResourceManager()    

    def connect(self, port: int, baudrate: int = 57600) -> None:
        """
        Connects to the laser indicated and sets initial conditions

        Parameters
        ----------
        port: int
            Indicates the number of the port that the laser is connected to
        baudrate: int
            Sets the baudrate for the laser.
        """
        self.laser = self.var.open_resource('ASRL' + str(port) + '::INSTR')
        self.laser.baud_rate = baudrate
        self.laser.query(':SYSTem:Echo 0')
        self.laser.query(':SYSTem:BAUDrate ' + str(baudrate))
        self.laser.query(':SYSTem:ACKnowledge 1')

    def activate_laser(self) -> None: 
        """
        Turns on the selected laser
        """
        self.laser.query(':Laser:STATus ON')

    def deactivate_laser(self) -> None:
        """
        Turns off the selected laser
        """
        self.laser.query(':Laser:STATus OFF')

    def laser_sweep_start(self, amplitude: float = 13.0, frequency: float = 0.1, offset: float = 0, function: str = "sin", phase: int = 0) -> None:
        """
        Activates the piezo and sets relevant values (Hz, offset, amplitude, etc.)

        Parameters
        ----------
        amplitude: float
            Indicates the amplitude of the wave generated by the piezo
        frequency: float
            Indicates the frequency of the wave generated by the piezo
        offset: float
            Applies an offset to the piezo
        function: string
            Sets the function type that the piezo will generate.
        phase: int
            Applies a phase shift in degrees to the wave.
        """
        self.laser.query(':p:freq:ampl ' + str(amplitude))
        self.laser.query(':p:freq ' + str(frequency))
        self.laser.query(':p:offs ' + str(offset))
        self.laser.query(':p:freq:gen ' + str(function))
        self.laser.query(':p:freq:gen:pha ' + str(phase))

        self.laser.query('p:ena on')

    def laser_sweep_stop(self) -> None:
        """
        Stops the piezo
        """
        self.laser.query(':p:ena off')

    def piezo_status(self) -> bool:
        """
        Outputs the enable of the status of the piezo

        Returns
        -------
        bool
            Boolean to represent whether the piezo is enabled or not
        """
        piezo = self.laser.query(':p:ena?')
        status = 1 if (piezo == "ON") else 0
        return status

    def laser_status(self) -> bool:
        """
        Outputs whether the laser is ON or OFF or in some transient state like SHUTDOWN or TURNON

        Returns
        -------
        bool
            Boolean to represent whether the laser is on or off
        """
        lStatus = self.laser.query(':l:stat?')
        statusBool = 1 if (lStatus == "ON") else 0
        return statusBool

    def laser_current_status(self) -> float:
        """
        Outputs the current of the laser

        Returns
        -------
        float
            Floating point number to show the laser current
        """
        current = self.laser.query(':l:curr?')
        return float(current)

    def set_laser_current(self, current: float) -> None:
        """
        Changes the laser current to the parameter value

        Parameters
        ------------
        current: float
            Value that will be set as the laser current. 
        """
        self.laser.query(':l:curr ' + str(current))

    def laser_voltage(self) -> float:
        """
        Outputs the laser voltage
        
        Returns
        -------
        float
            Floating point number to show the laser voltage
        """
        volt = self.laser.query(':l:volt?')
        return float(volt)

    def laser_power(self) -> float:
        """
        Outputs the current laser power. Only returns a value if the laser has an attachment for measuring output power.

        Returns
        -------
        float
            Floating point to show the laser's power usage
        """
        power = self.laser.query(':l:pow?')
        return float(power)

    def close(self) -> None:
        """
        Closes the connection to the laser and eliminates the resource manager variable
        """
        self.laser.close()


